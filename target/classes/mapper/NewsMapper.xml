<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ming.smartmedic.dao.NewsDao">


    <resultMap id="NewsMap" type="cn.ming.smartmedic.domain.News">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="userId" column="user_id"/>
        <result property="userName" column="user_name"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="isDeleted" column="is_deleted"/>
    </resultMap>


    <select id="countNews" parameterType="Map" resultType="Integer">
        select count(*)
        from t_sm_news
        <where>
            <if test="name != null and name != ''">
                AND name LIKE CONCAT('%', #{name}, '%')
            </if>
            AND is_deleted = 0
        </where>
    </select>

    <select id="listNews" parameterType="Map" resultType="cn.ming.smartmedic.domain.News">
        select id,title,content,create_time as createTime,update_time as updateTime,published
        from t_sm_news
        <where>
            <if test="title != null and title != ''">
                AND title LIKE CONCAT('%', #{title}, '%')
            </if>
            AND is_deleted = 0
        </where>
        ORDER BY create_time DESC
        <if test="page != null">
            LIMIT #{pageSize} OFFSET #{page}
        </if>
    </select>

    <select id="getNews" parameterType="Integer" resultType="cn.ming.smartmedic.domain.News">
        select *
        from t_sm_news
        <where>
            id = #{id} AND is_deleted = 0
        </where>
    </select>

    <insert id="saveNews" parameterType="cn.ming.smartmedic.domain.News" useGeneratedKeys="true" keyProperty="id"
            keyColumn="id">
        INSERT INTO t_sm_news
            (title, content, description, user_id, published)
            VALUE (#{title},#{content},#{description},#{userId},#{published})
    </insert>

    <update id="updateNews" parameterType="BigInteger">
        update t_sm_news
        set title = #{title},
        content = #{content},
        description = #{description},
        user_id = #{userId},
        published = #{published}
        <where>
            id = #{id}
        </where>

    </update>

    <update id="deleteNews" parameterType="BigInteger">
        update t_sm_news
        set is_deleted = 1
        where id = #{id}
    </update>

</mapper>
